# [문제명] : 병사 배치하기
# [문제] : 병사들을 전투력 내림차순으로 배치하시오. 배치 과정에서는 특정한 위치에 있는 병사를 열외시키는 방법을 이용합니다. 이때 남아 있는 병사의 수가 최대가 되도록 하시오. 결과 값은 열외시켜야 하는 병사의 수를 출력하시오.
# [시간 복잡도] 
# - 시간 제한 : 1초
# - 병사의 수 : 1 <= N <= 2,000

n = int(input())
data = list(map(int, input().split()))
# 순서를 뒤집어 '최적 증가 부분 수열' 문제로 치환
data.reverse()
# 다이나믹 프로그래밍을 위한 1차원 DP 테이블 초기화
dp = [1] * n
# 가장 긴 증가하는 부분 수열 (LIS) 알고리즘 수행
for i in range(1, n):
  for j in range(0, i):
    if data[j] < data[i]:
      dp[i] = max(dp[i], dp[j]+1)

# 열외해야 하는 병사의 최소 수를 출력
print(n-max(dp))

# 문제 해결 아이디어 : 가장 긴 증가하는 부분 수열 (Longest Increasing Subsequence, LIS)
# 배운 점
# 경우를 따져가면서 부분 구조 조건을 조사하자
# DP 테이블을 어떻게 설계할 것인가? 
# => 각 값을 마지막으로 갖는 최대 길이의 부분 수열
# 부분 구조를 어떻게 정의할 것인가?
# => 해당 값을 마지막으로 갖는 부분 수열 중 가장 큰 길이를 갖는 것은 무엇인가? 그리고 이것을 반복하면 최적의 값에 도다름