# 다이나믹 프로그래밍 : 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법
# 특징 : 이미 계산된 결과는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 함
# 구현 : 일반적으로 두 가지 방식(탑다운과 바텀업)으로 구성됨
# 다이나믹 프로그래밍은 다음의 조건을 만족할 때 사용 가능
# 1. 최적 부분 구조(Optimal Substructure)
# : 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있습니다.
# 2. 중복되는 부분 문제 (Overlapping Subproblem)
# : 동일한 작은 문제를 반복적으로 해결해야 합니다.

# 피보나치 수열 : 단순 재귀 코드
def fibo(x):
  if x==1 or x==2:
    return 1
  return fibo(x-1) + fibo(x-2)

print(fibo(4))

# 피보나치 수열 : 탑다운 다이나믹 프로그래밍 코드
d = [0] * 100
def fibo(x):
  if x==1 or x==2:
    return 1
  if d[x] != 0:
    return d[x]
  d[x] = fibo(x-1) + fibo(x-2)
  return d[x]

print(fibo(90))

# 피보나치 수열 : 보텀업 다이나믹 프로그래밍 코드
d = [0] * 100

d[1] = 1
d[2] = 1
n = 99

for i in range(3, n+1):
  d[i] = d[i-1] + d[i-2]

print(d[n])

# 다이나믹 프로그래밍 문제에 접근하는 방법
# - 가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 검토한다 => 다른 알고리즘으로 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍을 고려
# - 일단 재귀 함수로 비효율적인 완전 탐색 프로그래밍을 작성한 뒤에 (탑다운) 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있으면, 코드를 개선하는 방법을 사용할 수 있다.
# 일반적인 코딩 테스트 수준에서는 기본 유형의 다이나믹 프로그래밍 문제가 출되는 경우가 많다.
