# 파이썬의 정렬 라이브러리

# sorted() : 퀵 정렬과 동작 방식이 비슷한 병합 정렬을 기반으로 만들어진 함수
# 특징 : 일반적으로 퀵 정렬보다 느리지만 최악의 경우에도 시간 복잡도 O(NlogN)을 보장한다.
# 특징 : 리스트, 사전 자료형 등을 입력받아서 정렬된 리스트를 결과로 출력한다. (집합이나 사전 자료형을 입력받아도 반환되는 결과는 리스트 자료형)
array = [7, 5, 4, 3, 2, 1, 6, 8, 9]
result = sorted(array)
print(result)

# sort() : 리스트 변수가 하나 있을 때 내부 원소를 바로 정렬한다 -> 별도의 정렬된 리스트가 반환되지 않고 내부 원소가 바로 정렬된다.
array.sort()
print(array)

# sorted() or sort()를 상ㅇ할 때에는 Key 매개변수를 입력받을 수 있다. Key 값으로는 하나의 함수가 들어가야 하며 이는 정렬 기준이 된다. 
array = [('바나나', 2), ('딸기', 1), ('포도', 3)]

def setting(data):
  return data[1]

result = sorted(array, key=setting)
print(result)
array.sort(key=setting)
print(array)

# lambda 사용
array = [('바나나', 2), ('딸기', 1), ('포도', 3)]
result = sorted(array, key=lambda x: x[0])
print(result)
array.sort(key=lambda x:x[0])
print(array)

##########################################################
# 정렬 라이브러리는 아주 잘 작성된 함수이므로, 우리가 직접 퀵 정렬을 구현할 때보다 더욱 효과적이다. 따라서, 물제에서 별도의 요구사항이 없다면 단순히 정렬해야 하는 상황에서는 기본 정렬 라이브러리를 사용하고, 데이터의 범위가 한정되어 있으며 더 빠르게 동작해야 할 때는 계수 정렬을 사용하자.
# 코딩 테스트에서 정렬 알고리즘이 사용되는 경우 대표적 3가지
# 1. 정렬 라이브러리로 풀 수 있는 문제 : 단순하게 정렬 기법을 알고있는지 물어보는 문제
# 2. 정렬 알고리즘의 원리에 대해서 물어보는 문제 : 선택, 삽입, 퀵 정렬 등의 원리를 알고 있어야 문제를 풀 수 있다.
# 3. 더 빠른 정렬이 필요한 문제 : 퀵 정렬 기법으로는 풀 수 없으며 계수 정렬 등의 다른 정렬 알고리즘을 이용하거나 문제에서 기존에 알려진 알고리즘의 구조적인 개선을 거쳐야 풀 수 있다.